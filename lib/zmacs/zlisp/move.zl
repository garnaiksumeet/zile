;; Basic movement commands.
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(defsubr beginning-of-line ()
  "Move point to beginning of current line."
  (interactive)
  "return beginning_of_line ()")


(defsubr end-of-line ()
  "Move point to end of current line."
  (interactive)
  "return end_of_line ()")


(defsubr backward-char (&optional n)
  "Move point N characters backward (forward if N is negative).
On attempt to pass beginning or end of buffer, stop and signal error.
Interactively, N is the numeric prefix argument.
If N is omitted or nil, move point 1 character backward."
  (interactive)
    "n = n or 1
    local ok = move_char (-n)
    if not ok then
      minibuf_error ((n < 0 and 'End' or 'Beginning') .. ' of buffer')
    end
    return ok")


(defsubr forward-char (&optional n)
  "Move point N characters forward (backward if N is negative).
On attempt to pass beginning or end of buffer, stop and signal error.
Interactively, N is the numeric prefix argument.
If N is omitted or nil, move point 1 character forward."
  (interactive)
    "n = n or 1
    local ok = move_char (n)
    if not ok then
      minibuf_error ((n > 0 and 'End' or 'Beginning') .. ' of buffer')
    end
    return ok")


(defsubr goto-char (position)
  "Set point to POSITION, a number.
Beginning of buffer is position 1."
  (interactive)
    "if not position then
      position = minibuf_read_number ('Goto char: ')
    end

    return type (position) == 'number' and
      goto_offset (math.min (get_buffer_size (cur_bp) + 1, math.max (position, 1)))")


(defsubr goto-line (line)
  "Goto LINE, counting from line 1 at beginning of buffer.
If called interactively, a numeric prefix argument specifies
LINE; without a numeric prefix argument, read LINE from the
minibuffer."
  (interactive)
    "line = line or current_prefix_arg
    if not line and command.is_interactive () then
      line = minibuf_read_number ('Goto line: ')
    end

    if type (line) == 'number' then
      move_line ((math.max (line, 1) - 1) - offset_to_line (cur_bp, get_buffer_pt (cur_bp)))
      beginning_of_line ()
    else
      return false
    end")


(defsubr previous-line (&optional arg)
  "Move cursor vertically up ARG lines.

ARG defaults to 1.

If there is no character in the target line exactly over the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough."
  (interactive)
    "return move_line (-(arg or current_prefix_arg or 1))")


(defsubr next-line (&optional arg)
  "Move cursor vertically down ARG lines.

ARG defaults to 1.

If there is no character in the target line exactly under the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough."
  (interactive)
    "return move_line (arg or current_prefix_arg or 1)")


(defsubr beginning-of-buffer ()
  "Move point to the beginning of the buffer; leave mark at previous position."
  (interactive)
    "goto_offset (1)")


(defsubr end-of-buffer ()
  "Move point to the end of the buffer; leave mark at previous position."
  (interactive)
    "goto_offset (get_buffer_size (cur_bp) + 1)")


(defsubr scroll-down (&optional arg)
  "Scroll text of current window downward near full screen."
  (interactive)
    "return execute_with_uniarg (false, arg or 1, scroll_down, scroll_up)")


(defsubr scroll-up (&optional arg)
  "Scroll text of current window upward near full screen."
  (interactive)
    "return execute_with_uniarg (false, arg or 1, scroll_up, scroll_down)")


(defsubr forward-line (n)
  "Move N lines forward (backward if N is negative).
Precisely, if point is on line I, move to the start of line I + N
('start of line' in the logical order).
If there isn't room, go as far as possible (no error)."
  (interactive)
    "n = n or current_prefix_arg or 1
    if n ~= 0 then
      beginning_of_line ()
      return move_line (n)
    end
    return false")


(localfun move_paragraph (uniarg forward backward line_extremum)
  "if uniarg < 0 then
    uniarg = -uniarg
    forward = backward
  end

  for i = uniarg, 1, -1 do
    repeat until not is_empty_line () or not forward ()
    repeat until is_empty_line () or not forward ()
  end

  if is_empty_line () then
    beginning_of_line ()
  else
    line_extremum ()
  end
  return true")


(defsubr backward-paragraph (&optional arg)
  "Move backward to start of paragraph.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move forward N paragraphs"
  (interactive)
    "return move_paragraph (arg or 1, previous_line, next_line, beginning_of_line)")


(defsubr forward-paragraph (&optional arg)
  "Move forward to end of paragraph.
With argument ARG, do it ARG times;
a negative argument ARG = -N means move backward N paragraphs"
  (interactive)
    "return move_paragraph (arg or 1, next_line, previous_line, end_of_line)")


(defsubr forward-sexp (&optional arg)
  "Move forward across one balanced expression (sexp).
With ARG, do it that many times.  Negative arg -N means
move backward across N balanced expressions."
  (interactive)
    "return move_with_uniarg (arg or 1, move_sexp)")


(defsubr backward-sexp (&optional arg)
  "Move backward across one balanced expression (sexp).
With ARG, do it that many times.  Negative arg -N means
move forward across N balanced expressions."
  (interactive)
    "return move_with_uniarg (-(arg or 1), move_sexp)")


(defsubr back-to-indentation ()
  "Move point to the first non-whitespace character on this line."
  (interactive)
    "goto_offset (get_buffer_line_o (cur_bp))
    while not eolp () and following_char ():match ('%s') do
      move_char (1)
    end")


(defsubr forward-word (&optional arg)
  "Move point forward ARG words (backward if ARG is negative).
If ARG is omitted or nil, move point forward one word."
  (interactive)
    "return move_with_uniarg (arg or 1, move_word)")


(defsubr backward-word (&optional arg)
  "Move backward until encountering the beginning of a word.
With argument ARG, do this that many times.
if ARG is omtted or nil, move point backward one word."
  (interactive)
    "return move_with_uniarg (-(arg or 1), move_word)")
